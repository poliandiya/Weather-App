{"version":3,"sources":["components/Form.jsx","components/Weather.jsx","api.js","App.js","index.js"],"names":["Form","props","className","onSubmit","loadWeather","error","type","name","autoComplete","placeholder","role","Weather","city","weatherIcon","temp_celsius","minMaxTemp","temp_min","temp_max","description","min","max","getWeather","country","a","fetch","then","res","ok","json","status","alert","Error","object","catch","console","log","getImage","data","App","state","icon","image","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","getWeatherIcon","ID","setState","calcCelsius","temp","Math","floor","e","preventDefault","target","elements","value","response","img","weather","id","sys","main","results","urls","raw","this","src","alt","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdda0430.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Form = (props) => {\n  return (\n    <div className=\"Form\">\n      <form onSubmit={props.loadWeather}>\n        <div>{props.error ? error() : \"\"}</div>\n        <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"City\" />\n        <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"Country\" />\n        <button type=\"submit\" className=\"btn\">Get Weather</button>\n      </form>\n    </div>\n  );\n};\n\nconst error = () => {\n  return (\n    <div className=\"alert alert-danger\" role=\"alert\">\n      Please Enter City and Country\n    </div>\n\n  );\n};","import React from 'react';\n\nexport const Weather = (props) => {\n  return (\n    <div className=\"Weather\">\n      <h1>{props.city}</h1>\n      <i className={`wi ${props.weatherIcon}`}></i>\n      {props.temp_celsius ? (<h1>{props.temp_celsius}&deg;</h1>) : null}\n      {minMaxTemp(props.temp_min, props.temp_max)}\n      <h4>{props.description}</h4>\n    </div>\n  );\n};\n\nfunction minMaxTemp(min, max) {\n  if (min && max) {\n    return (\n      <h3>\n        <span>{min}&deg;</span>\n        <span>{max}&deg;</span>\n      </h3>\n    );\n  }\n};\n","const BASE_URL_WEATHER = 'http://api.openweathermap.org/data/2.5/weather';\nconst API_KEY_WEATHER = '3ce3d19e821ae1cfed5238064639d347';\n\nconst BASE_URL_IMAGE = 'https://api.unsplash.com/search/photos';\nconst API_KEY_IMAGE = 'sLA1J7rLSOnQRBwTB99y8MOtUPCcD4p-X60zGQpIf5c';\n\nexport const getWeather = async (city, country) => {\n  return await fetch(`${BASE_URL_WEATHER}?q=${city},${country}&appid=${API_KEY_WEATHER}`)\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        if (res.status === 404) {\n          return alert(\"No such place\");\n        }\n        alert(\"Error! Error!\");\n        throw new Error(\"Found an error!\");\n      }\n    })\n    .then((object) => {\n      return object;\n    })\n    .catch((error) => console.log(error));\n};\n\nexport const getImage = async (city) => {\n  return await fetch(`${BASE_URL_IMAGE}?query=${city}&client_id=${API_KEY_IMAGE}`)\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        throw new Error(\"No such place\");\n      }\n    })\n    .then((data) => {\n      return data;\n    })\n    .catch((error) => console.log(error));\n};\n","import React from 'react';\nimport { Form } from './components/Form.jsx';\nimport { Weather } from './components/Weather.jsx';\nimport { getWeather, getImage } from './api.js';\n\nimport \"weather-icons/css/weather-icons.css\";\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    city: \"\",\n    country: \"\",\n    icon: \"\",\n    temp_celsius: 0,\n    temp_max: 0,\n    temp_min: 0,\n    description: \"\",\n    error: \"\",\n    image: \"\",\n  };\n\n  weatherIcon = {\n    Thunderstorm: \"wi-thunderstorm\",\n    Drizzle: \"wi-sleet\",\n    Rain: \"wi-storm-shower\",\n    Snow: \"wi-snow\",\n    Atmosphere: \"wi-fog\",\n    Clear: \"wi-day-sunny\",\n    Clouds: \"wi-day-fog\",\n  };\n\n  getWeatherIcon = (ID) => {\n    switch (true) {\n      case ID >= 200 && ID <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case ID >= 300 && ID <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case ID >= 500 && ID <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n      case ID >= 600 && ID <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case ID >= 701 && ID <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n      case ID === 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n      case ID >= 801 && ID <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds });\n    };\n  };\n\n  calcCelsius = (temp) => Math.floor(temp - 273.15);\n\n  loadWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if (city && country) {\n      const response = await getWeather(city, country);\n      const img = await getImage(city);\n\n      console.log(response);\n      console.log(img);\n\n      this.getWeatherIcon(response.weather[0].id);\n\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        country: response.sys.country,\n        temp_celsius: this.calcCelsius(response.main.temp),\n        temp_max: this.calcCelsius(response.main.temp_max),\n        temp_min: this.calcCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false,\n        image: img.results[0].urls.raw,\n      });\n    } else {\n      this.setState({ error: true });\n    }\n  }\n\n  render() {\n    const { city, temp_celsius, temp_max, temp_min, description, icon, error, image } = this.state;\n    return (\n      <div className=\"App\">\n        <Form\n          loadWeather={this.loadWeather}\n          error={error}\n        />\n        <Weather\n          city={city}\n          temp_celsius={temp_celsius}\n          temp_max={temp_max}\n          temp_min={temp_min}\n          description={description}\n          weatherIcon={icon}\n        />\n        <img className=\"app__image\" src={image} alt=\"\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}